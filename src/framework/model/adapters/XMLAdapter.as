package framework.model.adapters 
{
	import flash.events.*;
	import flash.net.*;
	import framework.cache.*;
	import framework.model.*;
	import framework.net.*;
	import framework.utils.*;
	
	public class XMLAdapter extends AdapterBase
	{
		// This class was created to read and write XML files generated by Excel
		// Feel free to create your own adapter based on a different schema
		
		private var excelBaseXML:String = '<?xml version="1.0"?>\n<Workbook xmlns="urn:schemas-microsoft-com:office:spreadsheet"\n xmlns:o="urn:schemas-microsoft-com:office:office"\n xmlns:x="urn:schemas-microsoft-com:office:excel"\n xmlns:ss="urn:schemas-microsoft-com:office:spreadsheet"\n xmlns:html="http://www.w3.org/TR/REC-html40">\n <DocumentProperties xmlns="urn:schemas-microsoft-com:office:office">\n  <Author>Wrapper ActionScript Framework</Author>\n  <LastAuthor>Wrapper ActionScript Framework</LastAuthor>\n  <Created>2009-12-02T16:14:27Z</Created>\n  <Company>Motion &amp; Color</Company>\n  <Version>12.256</Version>\n </DocumentProperties>\n <OfficeDocumentSettings xmlns="urn:schemas-microsoft-com:office:office">\n  <AllowPNG/>\n </OfficeDocumentSettings>\n <ExcelWorkbook xmlns="urn:schemas-microsoft-com:office:excel">\n  <WindowHeight>17260</WindowHeight>\n  <WindowWidth>24800</WindowWidth>\n  <WindowTopX>-20</WindowTopX>\n  <WindowTopY>-20</WindowTopY>\n  <Date1904/>\n  <ProtectStructure>False</ProtectStructure>\n  <ProtectWindows>False</ProtectWindows>\n </ExcelWorkbook>\n <Styles>\n  <Style ss:ID="Default" ss:Name="Normal">\n   <Alignment ss:Vertical="Bottom"/>\n   <Borders/>\n   <Font ss:FontName="Verdana"/>\n   <Interior/>\n   <NumberFormat/>\n   <Protection/>\n  </Style>\n </Styles>\n <Worksheet ss:Name="{name}">\n  <Table ss:ExpandedColumnCount="3" ss:ExpandedRowCount="6" x:FullColumns="1"\n   x:FullRows="1">\n{data}\n  </Table>\n  <WorksheetOptions xmlns="urn:schemas-microsoft-com:office:excel">\n   <PageLayoutZoom>0</PageLayoutZoom>\n   <Selected/>\n   <ProtectObjects>False</ProtectObjects>\n   <ProtectScenarios>False</ProtectScenarios>\n  </WorksheetOptions>\n </Worksheet>\n</Workbook>'
		private var excelBaseRow:String = '<Row>\n{data}</Row>\n'
		private var excelBaseCell:String = '<Cell><Data ss:Type="String">{data}</Data></Cell>\n'
		
		public function XMLAdapter( model:ModelBase, cache:Cache, models:Models )
		{
			super( model, cache, models );
		}
		
		override public function export( id:int=0, params:Object=null ) : String
		{
			var result:String = "";
			var data:String = ""
			var row:String = "";
			var column:String;
			var clazz:* = models.getModel( model.className );
			var columns:Array = [];
			var cells:String = "";
			var value:*;
			if( params && params.exclude is Array ){
				for each( column in models.columns( model.className ) ){
					if( params.exclude.indexOf( column ) == -1 && models.columnsLocked( model.className ) != true ){
						columns.push( column );
					}
				}
			}else{
				columns = models.columns( model.className );
			}
			
			for each( column in columns ) {
				cells += excelBaseCell.split("{data}").join( column );
			}
			data += excelBaseRow.split("{data}").join(cells);
			
			if( id == 0 ) {
				for each( var item:* in clazz["all"]() ){
					cells = ""
					for each( column in columns ){
						value = item[column];
						if( value is Array ) {
							value = String(value.length) + " " + StringUtils.pluralize(value[0].className); 
						}else if( value == null ){
							value = ""; 
						}
						cells += excelBaseCell.split("{data}").join( value );
					}
					data += excelBaseRow.split("{data}").join(cells);
				}
			}else{
				cells = ""
				for each( column in columns ){
					value = clazz["findById"]( id )[ column ];
					if( value is Array ) {
						value = String(value.length) + " " + StringUtils.pluralize(value[0].className); 
					}else if( value == null ){
						value = ""; 
					}
					cells += excelBaseCell.split("{data}").join( value );
				}
				data += excelBaseRow.split("{data}").join(cells);
			}
			result = excelBaseXML.split("{data}").join(data).split("{name}").join(model.className);
			return result;
		}
		
		public function load( path:String ):void
		{
			assets.add( path ).addEventListener( Event.COMPLETE, onLoad );
			assets.load();
		}
		
		private function onLoad( event:Event ):void
		{	
			var xml:XML = new XML( event.target.data );
			var className:String = StringUtils.className( model );
			var clazz:Class = models.getModel( className );
			var headerSet:Boolean = false;
			var ns:Namespace = xml.namespace();
			var columns:Array = [];
			for each( var r:XML in xml..ns::Row ) {
				var cell:XML;
				if( !headerSet ){
					for each( cell in r.ns::Cell.ns::Data ) {
						var value:String = cell.text().toString();
						if( models.columnsLocked( className ) != true ) {
							models.columns( className ).push( value );
						}
						columns.push( value );
					}
					headerSet = true;
				}else{
					var instance:* = new clazz();
					var index:int = models.push( className, instance );
					var count:int = 0;
					for each( cell in r.ns::Cell.ns::Data ) {
						var column:String = columns[count];
						for each( var at:XML in cell.@*){
							if(at.toString() == "String"){
								instance[column] = cell.text().toString();
							}else if(at.toString() == "Number"){
								instance[column] = parseFloat(cell.text().toString());
							}
						}
						if( models.isAssociatedProperty( className, column ) ){
							var associatedObject:* = models.getAssociationForProperty(className, column)["class"].findById( cell );
							if( associatedObject != null ){
								var name:String = StringUtils.pluralize( className ).toLowerCase();
								if( !associatedObject.hasOwnProperty( name ) ) {
									associatedObject[ name ] = [];
								}
								associatedObject[ name ].push( instance );
							}
						}
						count++
					}
					instance.index = index;
				}
			}
			models.dispatchEvent(new Event( "modelLoaded" ) );
		}
	}
}